package com.winner;

import java.util.ArrayList;
import java.util.List;

/**
 * 给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。
 *
 * 每条从根节点到叶节点的路径都代表一个数字：
 *
 *     例如，从根节点到叶节点的路径 1 -> 2 -> 3 表示数字 123 。
 *
 * 计算从根节点到叶节点生成的 所有数字之和 。
 *
 * 叶节点 是指没有子节点的节点。
 *
 */
public class SumRootToLeafNumbers {

    public int sumNumbers(TreeNode root) {
        return dfs(root, 0);
    }

    public int dfs(TreeNode node, int preSum){
        if(node == null){
            return 0;
        }

        int sum = preSum * 10 + node.val;
        if(node.left == null && node.right == null){
            return sum;
        }else {
            return dfs(node.left, sum) + dfs(node.right, sum);
        }
    }


    List<String> numsStr;
    public int sumNumbers2(TreeNode root) {
        if (root == null) {
            return 0;
        }

        numsStr = new ArrayList<>();
        dfs(root, "");
        int ans = 0;
        for (String str : numsStr) {
            ans += Integer.valueOf(str);
        }

        return ans;
    }

    private void dfs(TreeNode node, String num) {
        StringBuilder sb = new StringBuilder(num);
        if (node == null) {
            return;
        }
        sb.append(node.val);
        if (node.left == null && node.right == null) {
            numsStr.add(sb.toString());
            return;
        }

        dfs(node.left, sb.toString());
        dfs(node.right, sb.toString());
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(9);
        root.right = new TreeNode(0);
        root.left.left = new TreeNode(5);
        root.left.right = new TreeNode(1);

        SumRootToLeafNumbers sumRootToLeafNumbers = new SumRootToLeafNumbers();
        int ans = sumRootToLeafNumbers.sumNumbers(root);
        System.out.println(ans);
    }
}
