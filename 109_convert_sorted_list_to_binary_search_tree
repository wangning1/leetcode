package com.winner;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * 给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。
 *
 * 本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。
 *
 * 示例:
 *
 * 给定的有序链表： [-10, -3, 0, 5, 9],
 *
 * 一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：
 *
         0
         / \
         -3   9
         /   /
         -10  5
 */
public class ConvertSortedListToBinarySearchTree {
    /*****************************方法1 分治+中序遍历**********************************/
    ListNode ptr;
    public TreeNode sortedListToBST(ListNode head) {
        if(head == null){
            return null;
        }
        ptr = head;
        int listLen = listLen(head);
        return doBuildTree(0, listLen - 1);
    }

    private TreeNode doBuildTree(int left, int right){
        if(left  > right){
            return null;
        }

        int mid = (left + right + 1) / 2;
        TreeNode node = new TreeNode();
        node.left = doBuildTree(left, mid - 1);
        node.val = ptr.val;
        ptr = ptr.next;
        node.right = doBuildTree(mid + 1, right);
        return node;
    }

    private int listLen(ListNode head){
        int len = 0;
        while (head != null){
            len++;
            head = head.next;
        }
        return len;
    }


        /*****************************方法 快慢指针***********************************/

    public TreeNode sortedListToBST3(ListNode head){
        return buildTree(head, null);
    }

    private TreeNode buildTree(ListNode left, ListNode right){
        if(left == right){
            return null;
        }

        ListNode mid = getMid(left, right);
        TreeNode root = new TreeNode(mid.val);
        root.left = buildTree(left, mid);
        root.right = buildTree(mid.next, right);
        return root;
    }

    /**
     * 找到链表中间节点
     * @param left
     * @param right
     * @return
     */
    private ListNode getMid(ListNode left, ListNode right){
        ListNode fast = left;
        ListNode slow = left;
        while (fast != right && fast.next != right){
            fast = fast.next;
            fast = fast.next;
            slow = slow.next;
        }

        return slow;
    }

  /*****************************方法******************************************************/
    
    /**
     * 将链表转为有序数组，然后有序数组进行构造BST
     * @param head
     * @return
     */
    public TreeNode sortedListToBST2(ListNode head) {
        if (head == null) {
            return null;
        }

        List<Integer> listNums = new ArrayList<>();
        while (head != null) {
            listNums.add(head.val);
            head = head.next;
        }

        int[] numsArr = new int[listNums.size()];
        for (int i = 0; i < numsArr.length; i++) {
            numsArr[i] = listNums.get(i);
        }
        return arr2Tree(numsArr, 0, numsArr.length - 1);
    }

    private TreeNode arr2Tree(int[] numsArr, int begin, int end) {
        if (begin > end) {
            return null;
        }

        int mid = (begin + end) / 2;
        TreeNode root = new TreeNode(numsArr[mid]);
        root.left = arr2Tree(numsArr, begin, mid - 1);
        root.right = arr2Tree(numsArr, mid + 1, end);
        return root;
    }

    public static void main(String[] args) {
        ListNode head = new ListNode(-10);
        head.next = new ListNode(-3);
        head.next.next = new ListNode(0);
        head.next.next.next = new ListNode(5);
        head.next.next.next.next = new ListNode(9);

        ConvertSortedListToBinarySearchTree convertSortedListToBinarySearchTree = new ConvertSortedListToBinarySearchTree();
        TreeNode root = convertSortedListToBinarySearchTree.sortedListToBST(head);
        TreeNode.preOrderPrintTree(root);

    }
}
