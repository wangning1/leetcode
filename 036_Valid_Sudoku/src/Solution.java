/**
 * @authour winner
 * @Date 2020/4/14 22:34
 */
public class Solution {
    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                if (c != '.') {
                    //判断行
                    for (int row = 0; row < 9; row++) {
                        if (row != i && board[row][j] == c) {
                            return false;
                        }
                    }
                    //判断列
                    for (int col = 0; col < 9; col++) {
                        if (col != j && board[i][col] == c) {
                            return false;
                        }
                    }
                    //判断3*3矩阵
                    for (int k = 0; k < 9; k++) {
                        if ((3 * (i / 3) + k / 3) != i && (3 * (j / 3) + k / 3) != j && board[3 * (i / 3) + k / 3][3 * (j / 3) + k / 3] == c) {
                            return false;
                        }
                    }

                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
//        char[][] boards = new char[][]{
//                {'5','3','.','.','7','.','.','.','.'},
//                {'6','.','.','1','9','5','.','.','.'},
//                {'.','9','8','.','.','.','.','6','.'},
//                {'8','.','.','.','6','.','.','.','3'},
//                {'4','.','.','8','.','3','.','.','1'},
//                {'7','.','.','.','2','.','.','.','6'},
//                {'.','6','.','.','.','.','2','8','.'},
//                {'.','.','.','4','1','9','.','.','5'},
//                {'.','.','.','.','8','.','.','7','9'}
//        };

        char[][] boards = new char[][]{
                {'.', '4', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '4', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '1', '.', '.', '7', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '3', '.', '.', '.', '6', '.'},
                {'.', '.', '.', '.', '.', '6', '.', '9', '.'},
                {'.', '.', '.', '.', '1', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '2', '.', '.'},
                {'.', '.', '.', '8', '.', '.', '.', '.', '.'}};

        Solution solution = new Solution();
        System.out.println(solution.isValidSudoku(boards));
    }
}
